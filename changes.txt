increased threshold to 1.5
changed this line from     distances, indeces = self.ballTree.query(node.vlad.reshape(1, -1), 4) to     distances, indeces = self.ballTree.query(node.vlad.reshape(1, -1), 10)
if abs(candidate_id - node.id) > 25 to if abs(candidate_id - node.id) > 10

this code
    def loop_detection(self) -> None:
        self.ballTree = BallTree(self.node_vlads,leaf_size=20)
        # Look for loops
        for node in self.nodes:
            distances, indeces = self.ballTree.query(node.vlad.reshape(1, -1), 10)
            for i in range(3):
                candidate_id = self.nodes[indeces[0][1+i]].id
                candidate_dist = distances[0][1+i]
                if abs(candidate_id - node.id) > 10 and candidate_dist < threshold and not self.graph.has_edge(candidate_id, node.id):

                    print(f"Showing Candidate: {candidate_id} and {node.id}")
                    if self.approve_potential_loop(candidate_id, node.id, self.data_path):
                        self.graph.add_edge(candidate_id, node.id)

to
def loop_detection(self) -> None:
    num_neighbors = 10  # Increased from 4
    id_difference_threshold = 10  # Reduced from 25
    self.ballTree = BallTree(self.node_vlads, leaf_size=20)
    # Look for loops
    for node in self.nodes:
        distances, indices = self.ballTree.query(node.vlad.reshape(1, -1), num_neighbors)
        for i in range(1, num_neighbors):
            candidate_id = self.nodes[indices[0][i]].id
            candidate_dist = distances[0][i]
            if abs(candidate_id - node.id) > id_difference_threshold and candidate_dist < threshold and not self.graph.has_edge(candidate_id, node.id):
                print(f"Evaluating potential loop closure between nodes {node.id} and {candidate_id}")
                if self.approve_potential_loop(candidate_id, node.id, self.data_path):
                    self.graph.add_edge(candidate_id, node.id)
